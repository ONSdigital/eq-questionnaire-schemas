name: PR

on:
  pull_request

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install jsonnet
        run: |
          mkdir jsonnet
          curl -o jsonnet.tar.gz -L https://github.com/google/jsonnet/releases/download/v0.14.0/jsonnet-bin-v0.14.0-linux.tar.gz
          tar -xzf jsonnet.tar.gz -C jsonnet
          echo "::add-path::jsonnet"
      - name: Install pipenv --dev
        run: pip install pipenv==2018.11.26
      - run: |
          echo "::set-env name=PYTHON_VERSION::$(python -c 'import platform; print(platform.python_version())')"
      - name: Cache virtualenv
        id: cache-virtualenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs/
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-virtualenvs-${{ hashFiles('Pipfile.lock') }}
      - name: Install virtual environment
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: pipenv install --dev
      - name: Lint jsonnet
        run: make lint
      - name: Build schemas
        run: make build
      - name: Archive schema artifacts
        uses: actions/upload-artifact@v1
        with:
          name: schemas
          path: schemas
  test-translation-templates:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Download schemas
        uses: actions/download-artifact@v1
        with:
          name: schemas
      - name: Install pipenv
        run: pip install pipenv==2018.11.26
      - run: |
          echo "::set-env name=PYTHON_VERSION::$(python -c 'import platform; print(platform.python_version())')"
      - name: Cache virtualenv
        id: cache-virtualenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs/
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-virtualenvs-${{ hashFiles('Pipfile.lock') }}
      - name: Install virtual environment
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: pipenv install --dev
      - name: Test translation templates
        run: make test-translation-templates
  validate-schemas:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download schemas
        uses: actions/download-artifact@v1
        with:
          name: schemas
      - run: make run-validator
      - name: Validate schemas
        run: make validate-schemas
  upload-schemas-to-gcs:
    needs: validate-schemas
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download schemas
        uses: actions/download-artifact@v1
        with:
          name: schemas
      - name: Authenticate With Google Cloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: 'latest'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SCHEMAS_BUCKET_SA_KEY }}
      - name: Upload Schemas To GCS & Set Cache Control Headers
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          gsutil -m -h "Cache-Control:private, max-age=0, no-transform" \
          cp -r schemas "gs://${{ secrets.GCS_SCHEMAS_BUCKET }}/${BRANCH_NAME}/"
